URL - https://doc.akka.io/docs/akka/current/stream/stream-flows-and-basics.html#core-concepts

Source
A operator with exactly one output, emitting data elements whenever downstream operators are ready to receive them.

Sink
A operator with exactly one input, requesting and accepting data elements possibly slowing down the upstream producer
of elements.

Flow
A operator which has exactly one input and output, which connects its upstream and downstream by transforming
the data elements flowing through it.

RunnableGraph
A Flow that has both ends “attached” to a Source and Sink respectively, and is ready to be run().
It is possible to attach a Flow to a Source resulting in a composite source, and it is also possible to prepend a Flow
to a Sink to get a new sink. After a stream is properly terminated by having both a source and a sink, it will be
represented by the RunnableGraph type, indicating that it is ready to be executed.

It is important to remember that even after constructing the RunnableGraph by connecting
all the source, sink and different operators, no data will flow through it until it is materialized.
Materialization is the process of allocating all resources needed to run the computation described by a Graph
(in Akka Streams this will often involve starting up Actors).

Flows being a description of the processing pipeline they are immutable, thread-safe, and freely shareable,
which means that it is for example safe to share and send them between actors, to have one actor prepare the work,
and then have it be materialized at some completely different place in the code.


Akka Streams do not allow null to be passed through the stream as an element. In case you want to model the concept of
absence of a value we recommend using java.util.Optional which is available since Java 8.